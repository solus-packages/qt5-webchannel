<PISI>
    <Source>
        <Name>qt5-webchannel</Name>
        <Packager>
            <Name>Peter O&apos;Connor</Name>
            <Email>peter@solus-project.com</Email>
        </Packager>
        <License>GFDL-1.3</License>
        <License>GPL-2.0</License>
        <License>GPL-3.0</License>
        <License>LGPL-2.1</License>
        <License>LGPL-3.0</License>
        <PartOf>desktop.qt</PartOf>
        <Summary xml:lang="en">Qt5 Webchannel Module</Summary>
        <Description xml:lang="en">The Qt WebChannel module offers Qt applications a seamless way to publish `QObjects` for interaction
with HTML/JavaScript clients. These clients can either be inside local Qt `WebView`s or any other,
potentially remote, client which supports JavaScript, as long as a communication channel such
as WebSocket is available.
Qt WebChannel uses introspection on the `QObject`s and sends this serialized data to the clients.
There, with the help of a small JavaScript library, an object is created which simulates the API of
the `QObject`. Any invokable methods, including slots, can be called as well as properties read and
written. Additionally you can connect to signals and register JavaScript callbacks as handlers.
</Description>
        <Archive type="binary" sha1sum="79eb0752a961b8e0d15c77d298c97498fbc89c5a">https://solus-project.com/sources/README.Solus</Archive>
    </Source>
    <Package>
        <Name>qt5-webchannel</Name>
        <Summary xml:lang="en">Qt5 Webchannel Module</Summary>
        <Description xml:lang="en">The Qt WebChannel module offers Qt applications a seamless way to publish `QObjects` for interaction
with HTML/JavaScript clients. These clients can either be inside local Qt `WebView`s or any other,
potentially remote, client which supports JavaScript, as long as a communication channel such
as WebSocket is available.
Qt WebChannel uses introspection on the `QObject`s and sends this serialized data to the clients.
There, with the help of a small JavaScript library, an object is created which simulates the API of
the `QObject`. Any invokable methods, including slots, can be called as well as properties read and
written. Additionally you can connect to signals and register JavaScript callbacks as handlers.
</Description>
        <PartOf>desktop.qt</PartOf>
        <Files>
            <Path fileType="library">/usr/lib64/lib*.so.*</Path>
            <Path fileType="library">/usr/lib64/libQt5WebChannel.prl</Path>
            <Path fileType="library">/usr/lib64/qt5/mkspecs/modules/qt_lib_webchannel.pri</Path>
            <Path fileType="library">/usr/lib64/qt5/mkspecs/modules/qt_lib_webchannel_private.pri</Path>
            <Path fileType="library">/usr/lib64/qt5/qml/QtWebChannel/libdeclarative_webchannel.so</Path>
            <Path fileType="library">/usr/lib64/qt5/qml/QtWebChannel/plugins.qmltypes</Path>
            <Path fileType="library">/usr/lib64/qt5/qml/QtWebChannel/qmldir</Path>
        </Files>
    </Package>
    <Package>
        <Name>qt5-webchannel-demos</Name>
        <Summary xml:lang="en">Qt5 Webchannel Module</Summary>
        <Description xml:lang="en">The Qt WebChannel module offers Qt applications a seamless way to publish `QObjects` for interaction
with HTML/JavaScript clients. These clients can either be inside local Qt `WebView`s or any other,
potentially remote, client which supports JavaScript, as long as a communication channel such
as WebSocket is available.
Qt WebChannel uses introspection on the `QObject`s and sends this serialized data to the clients.
There, with the help of a small JavaScript library, an object is created which simulates the API of
the `QObject`. Any invokable methods, including slots, can be called as well as properties read and
written. Additionally you can connect to signals and register JavaScript callbacks as handlers.
</Description>
        <RuntimeDependencies>
            <Dependency release="9">qt5-webchannel</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="library">/usr/lib64/qt5/examples</Path>
        </Files>
    </Package>
    <Package>
        <Name>qt5-webchannel-devel</Name>
        <Summary xml:lang="en">Development files for qt5-webchannel</Summary>
        <Description xml:lang="en">The Qt WebChannel module offers Qt applications a seamless way to publish `QObjects` for interaction
with HTML/JavaScript clients. These clients can either be inside local Qt `WebView`s or any other,
potentially remote, client which supports JavaScript, as long as a communication channel such
as WebSocket is available.
Qt WebChannel uses introspection on the `QObject`s and sends this serialized data to the clients.
There, with the help of a small JavaScript library, an object is created which simulates the API of
the `QObject`. Any invokable methods, including slots, can be called as well as properties read and
written. Additionally you can connect to signals and register JavaScript callbacks as handlers.
</Description>
        <PartOf>programming.devel</PartOf>
        <RuntimeDependencies>
            <Dependency release="9">qt5-webchannel</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="header">/usr/include/</Path>
            <Path fileType="library">/usr/lib64/cmake/</Path>
            <Path fileType="library">/usr/lib64/lib*.so</Path>
            <Path fileType="data">/usr/lib64/pkgconfig/*.pc</Path>
        </Files>
    </Package>
    <History>
        <Update release="9">
            <Date>2018-05-28</Date>
            <Version>5.11.0</Version>
            <Comment>Packaging update</Comment>
            <Name>Peter O&apos;Connor</Name>
            <Email>peter@solus-project.com</Email>
        </Update>
    </History>
</PISI>